بص يا معلم انا دلوقتي عاوز اعمل Dynamic DTM
بس عاوز اعمل الاسكانر بقي ليها 
المهم هيبقي عندي شويه فايلات 

Alphabet.txt
( ) , a b c d e f g h i g k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9  

Automaton.txt
6
1
5
2 3 4 5 6

ReversedWords.txt
red
blue
green
yellow

TokenTypes.txt
Open
Number
Color
Comma
Close

Transition.txt 
1 ( 2
1 1 3 
1 2 3 
1 3 3 
1 4 3 
1 5 3 
1 6 3 
1 7 3
1 8 3 
1 9 3 
3 0 3 
3 1 3 
3 2 3 
3 3 3 
3 4 3 
3 5 3 
3 6 3 
3 7 3
3 8 3 
3 9 3
1 a 4
1 b 4
1 c 4
1 d 4
1 e 4
1 f 4
1 g 4
1 h 4
1 i 4
1 j 4
1 k 4
1 l 4
1 m 4
1 n 4
1 o 4
1 p 4
1 q 4
1 r 4
1 s 4
1 t 4
1 u 4
1 v 4
1 w 4
1 x 4
1 y 4
1 z 4
4 a 4
4 b 4
4 c 4
4 d 4
4 e 4
4 f 4
4 g 4
4 h 4
4 i 4
4 j 4
4 k 4
4 l 4
4 m 4
4 n 4
4 o 4
4 p 4
4 q 4
4 r 4
4 s 4
4 t 4
4 u 4
4 v 4
4 w 4
4 x 4
4 y 4
4 z 4
1 , 5
1 ) 6


Tokens.txt => ده الي بيكتب فيه الاوتبوت 

الكود 
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <sstream>
using namespace std;

int getState(int state, char c, map<pair<int, char>, int>& transitionFunction) {
    pair<int, char> key = { state, c };
    return (transitionFunction.find(key) != transitionFunction.end()) ? transitionFunction[key] : -1; // Error State
}

bool isFinal(int state, vector<int>& finalStates) {
    return find(finalStates.begin(), finalStates.end(), state) != finalStates.end();
}

bool isExactMatch(const string& word, vector<string>& ReversedWords) {
    return find(ReversedWords.begin(), ReversedWords.end(), word) != ReversedWords.end();
}

// فحص إذا كان الحرف عبارة عن علامة خاصة (مثل الأقواس والفواصل)
bool isSpecialChar(char c) {
    return c == '(' || c == ')' || c == ',';
}

// الحصول على نوع الرمز بناءً على محتواه وحالة القبول
string getTokenType(const string& lexeme, int state, vector<int>& finalStates, 
                   map<int, string>& tokenTypes, vector<string>& ReversedWords) {
    if (!isFinal(state, finalStates)) {
        return "Invalid_Token";
    }
    
    if (lexeme == "(") return "Open";
    if (lexeme == ")") return "Close";
    if (lexeme == ",") return "Comma";
    
    if (isExactMatch(lexeme, ReversedWords)) {
        return "Color";
    }
    
    if (tokenTypes.find(state) != tokenTypes.end()) {
        return tokenTypes[state];
    }
    
    return "Invalid_Token";
}

void Scan(vector<char>& inputFile, vector<char>& alphabets, int startState, vector<int>& finalStates,
    map<pair<int, char>, int>& transitionFunction, vector<string>& ReversedWords,
    map<int, string>& tokenTypes, ofstream& outputToken) {
    
    int curState = startState;
    string lexeme = "";
    size_t i = 0;
    
    while (i <= inputFile.size()) {
        char currentChar = (i < inputFile.size()) ? inputFile[i] : ' ';
        
        // إذا كان الحرف الحالي علامة خاصة ولدينا lexeme غير فارغ
        // نعالج الـ lexeme الحالي أولاً ثم نتعامل مع العلامة الخاصة
        if ((isSpecialChar(currentChar) || i == inputFile.size()) && !lexeme.empty()) {
            // معالجة الـ lexeme الحالي
            string tokenType = getTokenType(lexeme, curState, finalStates, tokenTypes, ReversedWords);
            outputToken << lexeme << " - " << tokenType << endl;
            
            // إعادة تعيين الحالة والـ lexeme
            lexeme = "";
            curState = startState;
            
            // لا نزيد i في هذه الحالة لمعالجة الحرف الخاص في التكرار التالي
            if (i < inputFile.size() && isSpecialChar(currentChar)) {
                continue;
            }
        }
        
        // إذا كان الحرف الحالي علامة خاصة ولم يكن لدينا lexeme
        if (i < inputFile.size() && isSpecialChar(currentChar)) {
            string specialCharStr(1, currentChar);
            string tokenType;
            
            if (currentChar == '(') tokenType = "Open";
            else if (currentChar == ')') tokenType = "Close";
            else if (currentChar == ',') tokenType = "Comma";
            
            outputToken << specialCharStr << " - " << tokenType << endl;
            i++;
            continue;
        }
        
        // التعامل مع الحروف العادية
        if (i < inputFile.size()) {
            int nextState = getState(curState, currentChar, transitionFunction);
            
            if (nextState != -1) {
                // الانتقال صالح
                lexeme += currentChar;
                curState = nextState;
            } else {
                // الانتقال غير صالح، معالجة الـ lexeme الحالي إذا كان غير فارغ
                if (!lexeme.empty()) {
                    string tokenType = getTokenType(lexeme, curState, finalStates, tokenTypes, ReversedWords);
                    outputToken << lexeme << " - " << tokenType << endl;
                    
                    lexeme = "";
                    curState = startState;
                    
                    // معالجة الحرف الحالي في التكرار التالي
                    continue;
                }
                
                // إذا كان الحرف الحالي غير صالح ولم يكن لدينا lexeme
                // معالجة الحرف كـ lexeme منفرد
                lexeme = currentChar;
                string tokenType = "Invalid_Token";
                outputToken << lexeme << " - " << tokenType << endl;
                
                lexeme = "";
                curState = startState;
            }
        }
        
        i++;
    }
}

int main() {
    ifstream inputAlphabet("Alphabet.txt");
    vector<char> alphabets;
    char c;
    while (inputAlphabet >> c) {
        alphabets.push_back(c);
    }

    ifstream inputAutomaton("Automaton.txt");
    int numberOfStates, startState, numberOfFinalStates;
    vector<int> finalStates;
    inputAutomaton >> numberOfStates >> startState >> numberOfFinalStates;
    for (int i = 0; i < numberOfFinalStates; i++) {
        int finalState;
        inputAutomaton >> finalState;
        finalStates.push_back(finalState);
    }

    ifstream inputTransition("Transition.txt");
    map<pair<int, char>, int> transitionFunction;
    int fromState, toState;
    while (inputTransition >> fromState >> c >> toState) {
        transitionFunction[{fromState, c}] = toState;
    }

    ifstream inputTokenTypes("TokenTypes.txt");
    map<int, string> tokenTypes;
    int index = 0;
    string s;
    while (getline(inputTokenTypes, s) && index < finalStates.size()) {
        tokenTypes[finalStates[index]] = s;
        index++;
    }

    ifstream inputReversedWords("ReversedWords.txt");
    vector<string> ReversedWords;
    while (getline(inputReversedWords, s)) {
        ReversedWords.push_back(s);
    }

    ofstream outputToken("Tokens.txt");
    string line;
    cout << "Enter Input: ";
    getline(cin, line);
    vector<char> inputUser(line.begin(), line.end());
    Scan(inputUser, alphabets, startState, finalStates, transitionFunction, ReversedWords, tokenTypes, outputToken);
    cout << "Tokenization complete. Check Tokens.txt." << endl;
    return 0;
}

الي مطلوب بقي 
inputUser => (),red,ftr)11
output => 
( - Open
) - Close
, - Comma
red - Color
, - Comma
ftr - Invalid_Token
) - Close
11 - Number
وخلي بالك الحاجه الي موجوده في فايل ال 
ReversedWords.txt 
بنتعامل معاها علي اساس انها Color
غير كده بتبقي Invalid_Token
حلو بقي انا عاوزك تعدل كل التعديلات الي تطلع المطلوب
