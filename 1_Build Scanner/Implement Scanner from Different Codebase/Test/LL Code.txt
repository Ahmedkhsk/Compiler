#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <sstream>
using namespace std;

int getState(int state, char c, map<pair<int, char>, int> transitionFunction) {
    pair<int, char> key = { state, c };

    if (transitionFunction.find(key) != transitionFunction.end()) {
        return transitionFunction[key];
    }
    return -1; //Error State
}
bool isFinal(int state , vector<int> finalStates)
{
    for (int i = 0; i < finalStates.size(); i++)
        if (finalStates[i] == state)
            return true;
            
    return false;
}
void Scan(vector<char> inputFile, vector<char> alphabets, int startState , vector<int> finalStates , map<pair<int, char>, int> transitionFunction, vector<string> ReversedWords, map<int, string> tokenTypes)
{
    int curentState = startState , PrevState, ErrorState = -1;

    for (int i = 0; i < inputFile.size(); i++)
    {
        PrevState = curentState;
        curentState = getState(curentState , inputFile.at(i), transitionFunction);

        if(curentState == ErrorState)
            if (isFinal(PrevState, finalStates))
            {

            }


    }

}
int main() {
    ifstream inputAlphabet("Alphabet.txt");
    vector<char> alphabets;
    char c;
    while (inputAlphabet >> c) {
        alphabets.push_back(c);
    }

    ifstream inputAutomaton("Automaton.txt");
    int numberOfStates, startState, numberOfFinalStates;
    vector<int> finalStates;
    inputAutomaton >> numberOfStates >> startState >> numberOfFinalStates;
    for (int i = 0; i < numberOfFinalStates; i++) {
        int finalState;
        inputAutomaton >> finalState;
        finalStates.push_back(finalState);
    }

    ifstream inputTransition("Transition.txt");
    map<pair<int, char>, int> transitionFunction;
    int fromState, toState;
    while (inputTransition >> fromState >> c >> toState) 
                transitionFunction[{fromState, c}] = toState;
    

    ifstream inputTokenTypes("TokenTypes.txt");

    map<int, string> tokenTypes;
    int index = 0;
    string s;

    while (getline(inputTokenTypes, s) && index < finalStates.size()) {
        tokenTypes[finalStates[index]] = s;
        index++;
    }

    ifstream inputReversedWords("ReversedWords.txt");

    vector<string> ReversedWords;
    while (getline(inputReversedWords, s))
    {
        ReversedWords.push_back(s);
    }

    ofstream outputToken("Tokens.txt");
    string line;
    cout << "Entre Input: ";

    getline(cin, line);
    vector<char> inputUser(line.begin(), line.end());

    

    return 0;
}