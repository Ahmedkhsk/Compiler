#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <set>
#include <sstream>
using namespace std;

int main() {
    ifstream inputAlphabet("Alphabet.txt");
    vector<char> alphabets;
    char c;
    while (inputAlphabet >> c) {
        alphabets.push_back(c);
    }

    ifstream inputAutomaton("Automaton.txt");
    int numberOfStates, startState, numberOfFinalStates;
    vector<int> finalStates;
    inputAutomaton >> numberOfStates >> startState >> numberOfFinalStates;
    for (int i = 0; i < numberOfFinalStates; i++) {
        int finalState;
        inputAutomaton >> finalState;
        finalStates.push_back(finalState);
    }

    ifstream inputTransition("Transition.txt");
    map<pair<int, char>, int> transitionFunction;
    int fromState, toState;
    while (inputTransition >> fromState >> c >> toState) {
        transitionFunction[{fromState, c}] = toState;
    }

    ifstream inputTokenTypes("TokenTypes.txt");

    map<int, string> tokenTypes;
    int index = 0;
    string s;

    while (getline(inputTokenTypes, s) && index < finalStates.size()) {
        tokenTypes[finalStates[index]] = s;
        index++;
    }
    
    ifstream inputValidColor("ValidColors.txt");
    
    vector<string> ValidColors;
    while (getline(inputValidColor,s))
    {
        ValidColors.push_back(s);
    }
    
    ofstream outputToken("Tokens.txt");
    string line;
    cout << "Entre Input: ";

    getline(cin, line);
    vector<char> inputUser(line.begin(), line.end());
    
    for (const auto& item : inputUser)
    {
        string buffer = "";
        int curentState = startState;

        if (item == alphabets[0])
        {
            outputToken << alphabets[0] << " => " << tokenTypes[2] << endl;
        } 
        else if(item == alphabets[1])
        {
            outputToken << alphabets[1] << " => " << tokenTypes[6] << endl;
        }
        else if (item == alphabets[2])
        {
            outputToken << alphabets[2] << " => " << tokenTypes[5] << endl;
        }
        else if (isdigit(item))
        {

        }
    }

    return 0;
}